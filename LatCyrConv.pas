unit LatCyrConv;

interface


function LatToCyr(const WideStr: WideString): WideString; overload;
function CyrToLat(const WideStr: WideString): WideString; overload;

function LatToCyr(const str: AnsiString): AnsiString; overload;
function CyrToLat(const str: AnsiString): AnsiString; overload;

procedure SetLatCodePage(cp: Integer);
procedure SetCyrCodePage(cp: Integer);
function GetLatCodePage: Integer;
function GetCyrCodePage: Integer;


implementation

uses
    CodePageConv;

var
    LatCodePage: Integer = CP_EUROPE;
    CyrCodePage: Integer = CP_CYRILIC;

const
  CyrLatTbl : array [$402..$45f] of array [0..1] of Word =
    (($110,$0),($403,$0),($404,$0),($405,$0),($406,$0),($407,$0),($4a,$0),
    ($4c,$6a),($4e,$6a),($106,$0),($40c,$0),($40d,$0),($40e,$0),($44,$17e),
    ($41,$0),($42,$0),($56,$0),($47,$0),($44,$0),($45,$0),($17d,$0),($5a,$0),
    ($49,$0),($419,$0),($4b,$0),($4c,$0),($4d,$0),($4e,$0),($4f,$0),($50,$0),
    ($52,$0),($53,$0),($54,$0),($55,$0),($46,$0),($48,$0),($43,$0),($10c,$0),
    ($160,$0),($429,$0),($42a,$0),($42b,$0),($42c,$0),($42d,$0),($42e,$0),
    ($42f,$0),($61,$0),($62,$0),($76,$0),($67,$0),($64,$0),($65,$0),($17e,$0),
    ($7a,$0),($69,$0),($439,$0),($6b,$0),($6c,$0),($6d,$0),($6e,$0),($6f,$0),
    ($70,$0),($72,$0),($73,$0),($74,$0),($75,$0),($66,$0),($68,$0),($63,$0),
    ($10d,$0),($161,$0),($449,$0),($44a,$0),($44b,$0),($44c,$0),($44d,$0),
    ($44e,$0),($44f,$0),($450,$0),($451,$0),($111,$0),($453,$0),($454,$0),
    ($455,$0),($456,$0),($457,$0),($6a,$0),($6c,$6a),($6e,$6a),($107,$0),
    ($45c,$0),($45d,$0),($45e,$0),($64,$17e));

//    [l1,l2] = lat
//    ent = LatCyrTbl[l1]
//    cyr = if mask && (l2 & mask == match) then res_yes else res_no
//    ent = [mask, match, res_yes, res_no]
 LatCyrTbl : array [$41..$17e] of array [0..3] of Word =
    ((0,0,0,$410),(0,0,0,$411),(0,0,0,$426),($fffc,$17c,$40f,$414),(0,0,0,$415),
    (0,0,0,$424),(0,0,0,$413),(0,0,0,$425),(0,0,0,$418),(0,0,0,$408),(0,0,0,$41a),
    ($ffdf,$4a,$409,$41b),(0,0,0,$41c),($ffdf,$4a,$40a,$41d),(0,0,0,$41e),
    (0,0,0,$41f),(0,0,0,$51),(0,0,0,$420),(0,0,0,$421),(0,0,0,$422),(0,0,0,$423),
    (0,0,0,$412),(0,0,0,$57),(0,0,0,$58),(0,0,0,$59),(0,0,0,$417),(0,0,0,$5b),
    (0,0,0,$5c),(0,0,0,$5d),(0,0,0,$5e),(0,0,0,$5f),(0,0,0,$60),(0,0,0,$430),
    (0,0,0,$431),(0,0,0,$446),($ffff,$17e,$45f,$434),(0,0,0,$435),(0,0,0,$444),
    (0,0,0,$433),(0,0,0,$445),(0,0,0,$438),(0,0,0,$458),(0,0,0,$43a),
    ($ffff,$6a,$459,$43b),(0,0,0,$43c),($ffff,$6a,$45a,$43d),(0,0,0,$43e),
    (0,0,0,$43f),(0,0,0,$71),(0,0,0,$440),(0,0,0,$441),(0,0,0,$442),(0,0,0,$443),
    (0,0,0,$432),(0,0,0,$77),(0,0,0,$78),(0,0,0,$79),(0,0,0,$437),(0,0,0,$7b),
    (0,0,0,$7c),(0,0,0,$7d),(0,0,0,$7e),(0,0,0,$7f),(0,0,0,$80),(0,0,0,$81),
    (0,0,0,$82),(0,0,0,$83),(0,0,0,$84),(0,0,0,$85),(0,0,0,$86),(0,0,0,$87),
    (0,0,0,$88),(0,0,0,$89),(0,0,0,$8a),(0,0,0,$8b),(0,0,0,$8c),(0,0,0,$8d),
    (0,0,0,$8e),(0,0,0,$8f),(0,0,0,$90),(0,0,0,$91),(0,0,0,$92),(0,0,0,$93),
    (0,0,0,$94),(0,0,0,$95),(0,0,0,$96),(0,0,0,$97),(0,0,0,$98),(0,0,0,$99),
    (0,0,0,$9a),(0,0,0,$9b),(0,0,0,$9c),(0,0,0,$9d),(0,0,0,$9e),(0,0,0,$9f),
    (0,0,0,$a0),(0,0,0,$a1),(0,0,0,$a2),(0,0,0,$a3),(0,0,0,$a4),(0,0,0,$a5),
    (0,0,0,$a6),(0,0,0,$a7),(0,0,0,$a8),(0,0,0,$a9),(0,0,0,$aa),(0,0,0,$ab),
    (0,0,0,$ac),(0,0,0,$ad),(0,0,0,$ae),(0,0,0,$af),(0,0,0,$b0),(0,0,0,$b1),
    (0,0,0,$b2),(0,0,0,$b3),(0,0,0,$b4),(0,0,0,$b5),(0,0,0,$b6),(0,0,0,$b7),
    (0,0,0,$b8),(0,0,0,$b9),(0,0,0,$ba),(0,0,0,$bb),(0,0,0,$bc),(0,0,0,$bd),
    (0,0,0,$be),(0,0,0,$bf),(0,0,0,$c0),(0,0,0,$c1),(0,0,0,$c2),(0,0,0,$c3),
    (0,0,0,$c4),(0,0,0,$c5),(0,0,0,$c6),(0,0,0,$c7),(0,0,0,$c8),(0,0,0,$c9),
    (0,0,0,$ca),(0,0,0,$cb),(0,0,0,$cc),(0,0,0,$cd),(0,0,0,$ce),(0,0,0,$cf),
    (0,0,0,$d0),(0,0,0,$d1),(0,0,0,$d2),(0,0,0,$d3),(0,0,0,$d4),(0,0,0,$d5),
    (0,0,0,$d6),(0,0,0,$d7),(0,0,0,$d8),(0,0,0,$d9),(0,0,0,$da),(0,0,0,$db),
    (0,0,0,$dc),(0,0,0,$dd),(0,0,0,$de),(0,0,0,$df),(0,0,0,$e0),(0,0,0,$e1),
    (0,0,0,$e2),(0,0,0,$e3),(0,0,0,$e4),(0,0,0,$e5),(0,0,0,$e6),(0,0,0,$e7),
    (0,0,0,$e8),(0,0,0,$e9),(0,0,0,$ea),(0,0,0,$eb),(0,0,0,$ec),(0,0,0,$ed),
    (0,0,0,$ee),(0,0,0,$ef),(0,0,0,$f0),(0,0,0,$f1),(0,0,0,$f2),(0,0,0,$f3),
    (0,0,0,$f4),(0,0,0,$f5),(0,0,0,$f6),(0,0,0,$f7),(0,0,0,$f8),(0,0,0,$f9),
    (0,0,0,$fa),(0,0,0,$fb),(0,0,0,$fc),(0,0,0,$fd),(0,0,0,$fe),(0,0,0,$ff),
    (0,0,0,$100),(0,0,0,$101),(0,0,0,$102),(0,0,0,$103),(0,0,0,$104),(0,0,0,$105),
    (0,0,0,$40b),(0,0,0,$45b),(0,0,0,$108),(0,0,0,$109),(0,0,0,$10a),(0,0,0,$10b),
    (0,0,0,$427),(0,0,0,$447),(0,0,0,$10e),(0,0,0,$10f),(0,0,0,$402),(0,0,0,$452),
    (0,0,0,$112),(0,0,0,$113),(0,0,0,$114),(0,0,0,$115),(0,0,0,$116),(0,0,0,$117),
    (0,0,0,$118),(0,0,0,$119),(0,0,0,$11a),(0,0,0,$11b),(0,0,0,$11c),(0,0,0,$11d),
    (0,0,0,$11e),(0,0,0,$11f),(0,0,0,$120),(0,0,0,$121),(0,0,0,$122),(0,0,0,$123),
    (0,0,0,$124),(0,0,0,$125),(0,0,0,$126),(0,0,0,$127),(0,0,0,$128),(0,0,0,$129),
    (0,0,0,$12a),(0,0,0,$12b),(0,0,0,$12c),(0,0,0,$12d),(0,0,0,$12e),(0,0,0,$12f),
    (0,0,0,$130),(0,0,0,$131),(0,0,0,$132),(0,0,0,$133),(0,0,0,$134),(0,0,0,$135),
    (0,0,0,$136),(0,0,0,$137),(0,0,0,$138),(0,0,0,$139),(0,0,0,$13a),(0,0,0,$13b),
    (0,0,0,$13c),(0,0,0,$13d),(0,0,0,$13e),(0,0,0,$13f),(0,0,0,$140),(0,0,0,$141),
    (0,0,0,$142),(0,0,0,$143),(0,0,0,$144),(0,0,0,$145),(0,0,0,$146),(0,0,0,$147),
    (0,0,0,$148),(0,0,0,$149),(0,0,0,$14a),(0,0,0,$14b),(0,0,0,$14c),(0,0,0,$14d),
    (0,0,0,$14e),(0,0,0,$14f),(0,0,0,$150),(0,0,0,$151),(0,0,0,$152),(0,0,0,$153),
    (0,0,0,$154),(0,0,0,$155),(0,0,0,$156),(0,0,0,$157),(0,0,0,$158),(0,0,0,$159),
    (0,0,0,$15a),(0,0,0,$15b),(0,0,0,$15c),(0,0,0,$15d),(0,0,0,$15e),(0,0,0,$15f),
    (0,0,0,$428),(0,0,0,$448),(0,0,0,$162),(0,0,0,$163),(0,0,0,$164),(0,0,0,$165),
    (0,0,0,$166),(0,0,0,$167),(0,0,0,$168),(0,0,0,$169),(0,0,0,$16a),(0,0,0,$16b),
    (0,0,0,$16c),(0,0,0,$16d),(0,0,0,$16e),(0,0,0,$16f),(0,0,0,$170),(0,0,0,$171),
    (0,0,0,$172),(0,0,0,$173),(0,0,0,$174),(0,0,0,$175),(0,0,0,$176),(0,0,0,$177),
    (0,0,0,$178),(0,0,0,$179),(0,0,0,$17a),(0,0,0,$17b),(0,0,0,$17c),(0,0,0,$416),
    (0,0,0,$436));

procedure SetLatCodePage(cp: Integer);
begin
  LatCodePage := cp;
end;

procedure SetCyrCodePage(cp: Integer);
begin
  CyrCodePage := cp;
end;

function GetLatCodePage: Integer;
begin
 Result := LatCodePage;
end;

function GetCyrCodePage: Integer;
begin
  Result := CyrCodePage;
end;


function LatToCyr(const str: AnsiString): AnsiString;
begin
  Result := WideToAnsi(LatToCyr(AnsiToWide(str, LatCodePage)), CyrCodePage);
end;

function CyrToLat(const str: AnsiString): AnsiString;
begin
  Result := WideToAnsi(LatToCyr(AnsiToWide(str, CyrCodePage)), LatCodePage);
end;


function LatToCyr(const WideStr: WideString): WideString;
var
  s, d, e: ^WideChar;
  c: Word;
begin
    SetLength(Result, Length(WideStr));
    s := @WideStr[1];
    d := @Result[1];
    e := @WideStr[Length(WideStr)+1];
    while Cardinal(s) < Cardinal(e) do begin
        c := Word(s^);
        Inc(s);
        if (c >= Low(LatCyrTbl)) and (c <= High(LatCyrTbl)) then begin
            if (LatCyrTbl[c][0] <> 0) and (Cardinal(s) < Cardinal(e)) and
              (Word(s^) and LatCyrTbl[c][0] = LatCyrTbl[c][1]) then begin
                Inc(s);
                d^ := WideChar(LatCyrTbl[c][2]);
                  end else
                d^ := WideChar(LatCyrTbl[c][3]);
        end else
            d^ := WideChar(c);
        Inc(d);
    end;
    SetLength(Result, d - PWideChar(@Result[1]));
end;

function CyrToLat(const WideStr: WideString): WideString;
var
  i: Integer;
  s,d: ^WideChar;
  c: WideChar;
begin
    SetLength(Result, Length(WideStr) * 2);
    s := @WideStr[1];
    d := @Result[1];
    for i := 0 to Length(WideStr) - 1 do begin
        c := s^;
        Inc(s);
        if (Ord(c) >= Low(CyrLatTbl)) and (Ord(c) <= High(CyrLatTbl)) then begin
            d^ := WideChar(CyrLatTbl[Ord(c),0]);
            c := WideChar(CyrLatTbl[Ord(c),1]);
            if c <> #0 then begin
                Inc(d);
                d^ := c;
            end;
        end else
            d^ := c;
        Inc(d);
    end;
    SetLength(Result, d - PWideChar(@Result[1]));
end;

end.
